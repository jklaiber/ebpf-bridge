// Code generated by MockGen. DO NOT EDIT.
// Source: hostlink.go
//
// Generated by this command:
//
//	mockgen -source=hostlink.go -destination=mocks/hostlink_mock.go -package=mocks Link
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	hostlink "github.com/jklaiber/ebpf-bridge/pkg/hostlink"
	netlink "github.com/vishvananda/netlink"
	gomock "go.uber.org/mock/gomock"
)

// MockNetlinkWrapper is a mock of NetlinkWrapper interface.
type MockNetlinkWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockNetlinkWrapperMockRecorder
}

// MockNetlinkWrapperMockRecorder is the mock recorder for MockNetlinkWrapper.
type MockNetlinkWrapperMockRecorder struct {
	mock *MockNetlinkWrapper
}

// NewMockNetlinkWrapper creates a new mock instance.
func NewMockNetlinkWrapper(ctrl *gomock.Controller) *MockNetlinkWrapper {
	mock := &MockNetlinkWrapper{ctrl: ctrl}
	mock.recorder = &MockNetlinkWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetlinkWrapper) EXPECT() *MockNetlinkWrapperMockRecorder {
	return m.recorder
}

// LinkByIndex mocks base method.
func (m *MockNetlinkWrapper) LinkByIndex(index int) (netlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkByIndex", index)
	ret0, _ := ret[0].(netlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkByIndex indicates an expected call of LinkByIndex.
func (mr *MockNetlinkWrapperMockRecorder) LinkByIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkByIndex", reflect.TypeOf((*MockNetlinkWrapper)(nil).LinkByIndex), index)
}

// LinkByName mocks base method.
func (m *MockNetlinkWrapper) LinkByName(name string) (netlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkByName", name)
	ret0, _ := ret[0].(netlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkByName indicates an expected call of LinkByName.
func (mr *MockNetlinkWrapperMockRecorder) LinkByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkByName", reflect.TypeOf((*MockNetlinkWrapper)(nil).LinkByName), name)
}

// MockLink is a mock of Link interface.
type MockLink struct {
	ctrl     *gomock.Controller
	recorder *MockLinkMockRecorder
}

// MockLinkMockRecorder is the mock recorder for MockLink.
type MockLinkMockRecorder struct {
	mock *MockLink
}

// NewMockLink creates a new mock instance.
func NewMockLink(ctrl *gomock.Controller) *MockLink {
	mock := &MockLink{ctrl: ctrl}
	mock.recorder = &MockLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLink) EXPECT() *MockLinkMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockLink) Index() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].(int)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockLinkMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockLink)(nil).Index))
}

// Name mocks base method.
func (m *MockLink) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockLinkMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLink)(nil).Name))
}

// MockLinkFactory is a mock of LinkFactory interface.
type MockLinkFactory struct {
	ctrl     *gomock.Controller
	recorder *MockLinkFactoryMockRecorder
}

// MockLinkFactoryMockRecorder is the mock recorder for MockLinkFactory.
type MockLinkFactoryMockRecorder struct {
	mock *MockLinkFactory
}

// NewMockLinkFactory creates a new mock instance.
func NewMockLinkFactory(ctrl *gomock.Controller) *MockLinkFactory {
	mock := &MockLinkFactory{ctrl: ctrl}
	mock.recorder = &MockLinkFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkFactory) EXPECT() *MockLinkFactoryMockRecorder {
	return m.recorder
}

// NewLinkWithIndex mocks base method.
func (m *MockLinkFactory) NewLinkWithIndex(index int) (hostlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLinkWithIndex", index)
	ret0, _ := ret[0].(hostlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewLinkWithIndex indicates an expected call of NewLinkWithIndex.
func (mr *MockLinkFactoryMockRecorder) NewLinkWithIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLinkWithIndex", reflect.TypeOf((*MockLinkFactory)(nil).NewLinkWithIndex), index)
}

// NewLinkWithName mocks base method.
func (m *MockLinkFactory) NewLinkWithName(name string) (hostlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLinkWithName", name)
	ret0, _ := ret[0].(hostlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewLinkWithName indicates an expected call of NewLinkWithName.
func (mr *MockLinkFactoryMockRecorder) NewLinkWithName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLinkWithName", reflect.TypeOf((*MockLinkFactory)(nil).NewLinkWithName), name)
}
