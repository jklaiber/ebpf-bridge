// Code generated by MockGen. DO NOT EDIT.
// Source: linker.go
//
// Generated by this command:
//
//	mockgen -source=linker.go -destination=mocks/linker_mock.go -package=mocks Linker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLinker is a mock of Linker interface.
type MockLinker struct {
	ctrl     *gomock.Controller
	recorder *MockLinkerMockRecorder
}

// MockLinkerMockRecorder is the mock recorder for MockLinker.
type MockLinkerMockRecorder struct {
	mock *MockLinker
}

// NewMockLinker creates a new mock instance.
func NewMockLinker(ctrl *gomock.Controller) *MockLinker {
	mock := &MockLinker{ctrl: ctrl}
	mock.recorder = &MockLinkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinker) EXPECT() *MockLinkerMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockLinker) Attach() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach")
	ret0, _ := ret[0].(error)
	return ret0
}

// Attach indicates an expected call of Attach.
func (mr *MockLinkerMockRecorder) Attach() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockLinker)(nil).Attach))
}

// Detach mocks base method.
func (m *MockLinker) Detach() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detach")
	ret0, _ := ret[0].(error)
	return ret0
}

// Detach indicates an expected call of Detach.
func (mr *MockLinkerMockRecorder) Detach() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detach", reflect.TypeOf((*MockLinker)(nil).Detach))
}
