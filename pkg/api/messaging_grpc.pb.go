// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/api/messaging.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EbpfBridgeControllerClient is the client API for EbpfBridgeController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EbpfBridgeControllerClient interface {
	AddBridge(ctx context.Context, in *AddCommand, opts ...grpc.CallOption) (*AddResponse, error)
	RemoveBridge(ctx context.Context, in *RemoveCommand, opts ...grpc.CallOption) (*RemoveResponse, error)
	ListBridges(ctx context.Context, in *ListCommand, opts ...grpc.CallOption) (*ListResponse, error)
}

type ebpfBridgeControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEbpfBridgeControllerClient(cc grpc.ClientConnInterface) EbpfBridgeControllerClient {
	return &ebpfBridgeControllerClient{cc}
}

func (c *ebpfBridgeControllerClient) AddBridge(ctx context.Context, in *AddCommand, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/messaging.EbpfBridgeController/AddBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ebpfBridgeControllerClient) RemoveBridge(ctx context.Context, in *RemoveCommand, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/messaging.EbpfBridgeController/RemoveBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ebpfBridgeControllerClient) ListBridges(ctx context.Context, in *ListCommand, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/messaging.EbpfBridgeController/ListBridges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EbpfBridgeControllerServer is the server API for EbpfBridgeController service.
// All implementations must embed UnimplementedEbpfBridgeControllerServer
// for forward compatibility
type EbpfBridgeControllerServer interface {
	AddBridge(context.Context, *AddCommand) (*AddResponse, error)
	RemoveBridge(context.Context, *RemoveCommand) (*RemoveResponse, error)
	ListBridges(context.Context, *ListCommand) (*ListResponse, error)
	mustEmbedUnimplementedEbpfBridgeControllerServer()
}

// UnimplementedEbpfBridgeControllerServer must be embedded to have forward compatible implementations.
type UnimplementedEbpfBridgeControllerServer struct {
}

func (UnimplementedEbpfBridgeControllerServer) AddBridge(context.Context, *AddCommand) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBridge not implemented")
}
func (UnimplementedEbpfBridgeControllerServer) RemoveBridge(context.Context, *RemoveCommand) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBridge not implemented")
}
func (UnimplementedEbpfBridgeControllerServer) ListBridges(context.Context, *ListCommand) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBridges not implemented")
}
func (UnimplementedEbpfBridgeControllerServer) mustEmbedUnimplementedEbpfBridgeControllerServer() {}

// UnsafeEbpfBridgeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EbpfBridgeControllerServer will
// result in compilation errors.
type UnsafeEbpfBridgeControllerServer interface {
	mustEmbedUnimplementedEbpfBridgeControllerServer()
}

func RegisterEbpfBridgeControllerServer(s grpc.ServiceRegistrar, srv EbpfBridgeControllerServer) {
	s.RegisterService(&EbpfBridgeController_ServiceDesc, srv)
}

func _EbpfBridgeController_AddBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbpfBridgeControllerServer).AddBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messaging.EbpfBridgeController/AddBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbpfBridgeControllerServer).AddBridge(ctx, req.(*AddCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _EbpfBridgeController_RemoveBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbpfBridgeControllerServer).RemoveBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messaging.EbpfBridgeController/RemoveBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbpfBridgeControllerServer).RemoveBridge(ctx, req.(*RemoveCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _EbpfBridgeController_ListBridges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbpfBridgeControllerServer).ListBridges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messaging.EbpfBridgeController/ListBridges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbpfBridgeControllerServer).ListBridges(ctx, req.(*ListCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// EbpfBridgeController_ServiceDesc is the grpc.ServiceDesc for EbpfBridgeController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EbpfBridgeController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.EbpfBridgeController",
	HandlerType: (*EbpfBridgeControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBridge",
			Handler:    _EbpfBridgeController_AddBridge_Handler,
		},
		{
			MethodName: "RemoveBridge",
			Handler:    _EbpfBridgeController_RemoveBridge_Handler,
		},
		{
			MethodName: "ListBridges",
			Handler:    _EbpfBridgeController_ListBridges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/messaging.proto",
}
