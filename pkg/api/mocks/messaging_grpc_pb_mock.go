// Code generated by MockGen. DO NOT EDIT.
// Source: messaging_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=messaging_grpc.pb.go -destination=mocks/messaging_grpc_pb_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/jklaiber/ebpf-bridge/pkg/api"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEbpfBridgeControllerClient is a mock of EbpfBridgeControllerClient interface.
type MockEbpfBridgeControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockEbpfBridgeControllerClientMockRecorder
}

// MockEbpfBridgeControllerClientMockRecorder is the mock recorder for MockEbpfBridgeControllerClient.
type MockEbpfBridgeControllerClientMockRecorder struct {
	mock *MockEbpfBridgeControllerClient
}

// NewMockEbpfBridgeControllerClient creates a new mock instance.
func NewMockEbpfBridgeControllerClient(ctrl *gomock.Controller) *MockEbpfBridgeControllerClient {
	mock := &MockEbpfBridgeControllerClient{ctrl: ctrl}
	mock.recorder = &MockEbpfBridgeControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEbpfBridgeControllerClient) EXPECT() *MockEbpfBridgeControllerClientMockRecorder {
	return m.recorder
}

// AddBridge mocks base method.
func (m *MockEbpfBridgeControllerClient) AddBridge(ctx context.Context, in *api.AddCommand, opts ...grpc.CallOption) (*api.AddResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBridge", varargs...)
	ret0, _ := ret[0].(*api.AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBridge indicates an expected call of AddBridge.
func (mr *MockEbpfBridgeControllerClientMockRecorder) AddBridge(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBridge", reflect.TypeOf((*MockEbpfBridgeControllerClient)(nil).AddBridge), varargs...)
}

// ListBridges mocks base method.
func (m *MockEbpfBridgeControllerClient) ListBridges(ctx context.Context, in *api.ListCommand, opts ...grpc.CallOption) (*api.ListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBridges", varargs...)
	ret0, _ := ret[0].(*api.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBridges indicates an expected call of ListBridges.
func (mr *MockEbpfBridgeControllerClientMockRecorder) ListBridges(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBridges", reflect.TypeOf((*MockEbpfBridgeControllerClient)(nil).ListBridges), varargs...)
}

// RemoveBridge mocks base method.
func (m *MockEbpfBridgeControllerClient) RemoveBridge(ctx context.Context, in *api.RemoveCommand, opts ...grpc.CallOption) (*api.RemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveBridge", varargs...)
	ret0, _ := ret[0].(*api.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBridge indicates an expected call of RemoveBridge.
func (mr *MockEbpfBridgeControllerClientMockRecorder) RemoveBridge(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBridge", reflect.TypeOf((*MockEbpfBridgeControllerClient)(nil).RemoveBridge), varargs...)
}

// MockEbpfBridgeControllerServer is a mock of EbpfBridgeControllerServer interface.
type MockEbpfBridgeControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockEbpfBridgeControllerServerMockRecorder
}

// MockEbpfBridgeControllerServerMockRecorder is the mock recorder for MockEbpfBridgeControllerServer.
type MockEbpfBridgeControllerServerMockRecorder struct {
	mock *MockEbpfBridgeControllerServer
}

// NewMockEbpfBridgeControllerServer creates a new mock instance.
func NewMockEbpfBridgeControllerServer(ctrl *gomock.Controller) *MockEbpfBridgeControllerServer {
	mock := &MockEbpfBridgeControllerServer{ctrl: ctrl}
	mock.recorder = &MockEbpfBridgeControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEbpfBridgeControllerServer) EXPECT() *MockEbpfBridgeControllerServerMockRecorder {
	return m.recorder
}

// AddBridge mocks base method.
func (m *MockEbpfBridgeControllerServer) AddBridge(arg0 context.Context, arg1 *api.AddCommand) (*api.AddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBridge", arg0, arg1)
	ret0, _ := ret[0].(*api.AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBridge indicates an expected call of AddBridge.
func (mr *MockEbpfBridgeControllerServerMockRecorder) AddBridge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBridge", reflect.TypeOf((*MockEbpfBridgeControllerServer)(nil).AddBridge), arg0, arg1)
}

// ListBridges mocks base method.
func (m *MockEbpfBridgeControllerServer) ListBridges(arg0 context.Context, arg1 *api.ListCommand) (*api.ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBridges", arg0, arg1)
	ret0, _ := ret[0].(*api.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBridges indicates an expected call of ListBridges.
func (mr *MockEbpfBridgeControllerServerMockRecorder) ListBridges(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBridges", reflect.TypeOf((*MockEbpfBridgeControllerServer)(nil).ListBridges), arg0, arg1)
}

// RemoveBridge mocks base method.
func (m *MockEbpfBridgeControllerServer) RemoveBridge(arg0 context.Context, arg1 *api.RemoveCommand) (*api.RemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBridge", arg0, arg1)
	ret0, _ := ret[0].(*api.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBridge indicates an expected call of RemoveBridge.
func (mr *MockEbpfBridgeControllerServerMockRecorder) RemoveBridge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBridge", reflect.TypeOf((*MockEbpfBridgeControllerServer)(nil).RemoveBridge), arg0, arg1)
}

// mustEmbedUnimplementedEbpfBridgeControllerServer mocks base method.
func (m *MockEbpfBridgeControllerServer) mustEmbedUnimplementedEbpfBridgeControllerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEbpfBridgeControllerServer")
}

// mustEmbedUnimplementedEbpfBridgeControllerServer indicates an expected call of mustEmbedUnimplementedEbpfBridgeControllerServer.
func (mr *MockEbpfBridgeControllerServerMockRecorder) mustEmbedUnimplementedEbpfBridgeControllerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEbpfBridgeControllerServer", reflect.TypeOf((*MockEbpfBridgeControllerServer)(nil).mustEmbedUnimplementedEbpfBridgeControllerServer))
}

// MockUnsafeEbpfBridgeControllerServer is a mock of UnsafeEbpfBridgeControllerServer interface.
type MockUnsafeEbpfBridgeControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEbpfBridgeControllerServerMockRecorder
}

// MockUnsafeEbpfBridgeControllerServerMockRecorder is the mock recorder for MockUnsafeEbpfBridgeControllerServer.
type MockUnsafeEbpfBridgeControllerServerMockRecorder struct {
	mock *MockUnsafeEbpfBridgeControllerServer
}

// NewMockUnsafeEbpfBridgeControllerServer creates a new mock instance.
func NewMockUnsafeEbpfBridgeControllerServer(ctrl *gomock.Controller) *MockUnsafeEbpfBridgeControllerServer {
	mock := &MockUnsafeEbpfBridgeControllerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEbpfBridgeControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEbpfBridgeControllerServer) EXPECT() *MockUnsafeEbpfBridgeControllerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEbpfBridgeControllerServer mocks base method.
func (m *MockUnsafeEbpfBridgeControllerServer) mustEmbedUnimplementedEbpfBridgeControllerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEbpfBridgeControllerServer")
}

// mustEmbedUnimplementedEbpfBridgeControllerServer indicates an expected call of mustEmbedUnimplementedEbpfBridgeControllerServer.
func (mr *MockUnsafeEbpfBridgeControllerServerMockRecorder) mustEmbedUnimplementedEbpfBridgeControllerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEbpfBridgeControllerServer", reflect.TypeOf((*MockUnsafeEbpfBridgeControllerServer)(nil).mustEmbedUnimplementedEbpfBridgeControllerServer))
}
