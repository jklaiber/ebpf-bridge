// Code generated by MockGen. DO NOT EDIT.
// Source: bpf.go
//
// Generated by this command:
//
//	mockgen -source=bpf.go -destination=bpf_mock.go -package=bpf Bpf
//

// Package bpf is a generated GoMock package.
package bpf

import (
	reflect "reflect"

	ebpf "github.com/cilium/ebpf"
	gomock "go.uber.org/mock/gomock"
)

// MockBpf is a mock of Bpf interface.
type MockBpf struct {
	ctrl     *gomock.Controller
	recorder *MockBpfMockRecorder
}

// MockBpfMockRecorder is the mock recorder for MockBpf.
type MockBpfMockRecorder struct {
	mock *MockBpf
}

// NewMockBpf creates a new mock instance.
func NewMockBpf(ctrl *gomock.Controller) *MockBpf {
	mock := &MockBpf{ctrl: ctrl}
	mock.recorder = &MockBpfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBpf) EXPECT() *MockBpfMockRecorder {
	return m.recorder
}

// LoadPinnedMap mocks base method.
func (m *MockBpf) LoadPinnedMap(mapPath string) (*ebpf.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPinnedMap", mapPath)
	ret0, _ := ret[0].(*ebpf.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPinnedMap indicates an expected call of LoadPinnedMap.
func (mr *MockBpfMockRecorder) LoadPinnedMap(mapPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPinnedMap", reflect.TypeOf((*MockBpf)(nil).LoadPinnedMap), mapPath)
}

// ReadBpfObjects mocks base method.
func (m *MockBpf) ReadBpfObjects() (*bpfObjects, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBpfObjects")
	ret0, _ := ret[0].(*bpfObjects)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBpfObjects indicates an expected call of ReadBpfObjects.
func (mr *MockBpfMockRecorder) ReadBpfObjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBpfObjects", reflect.TypeOf((*MockBpf)(nil).ReadBpfObjects))
}

// ReadBpfSpecs mocks base method.
func (m *MockBpf) ReadBpfSpecs() (*ebpf.CollectionSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBpfSpecs")
	ret0, _ := ret[0].(*ebpf.CollectionSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBpfSpecs indicates an expected call of ReadBpfSpecs.
func (mr *MockBpfMockRecorder) ReadBpfSpecs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBpfSpecs", reflect.TypeOf((*MockBpf)(nil).ReadBpfSpecs))
}
