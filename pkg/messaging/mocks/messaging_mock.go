// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mocks/messaging_mock.go -package=mocks Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	messaging "github.com/jklaiber/ebpf-bridge/pkg/messaging"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddBridge mocks base method.
func (m *MockClient) AddBridge(in *messaging.AddCommand) (*messaging.AddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBridge", in)
	ret0, _ := ret[0].(*messaging.AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBridge indicates an expected call of AddBridge.
func (mr *MockClientMockRecorder) AddBridge(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBridge", reflect.TypeOf((*MockClient)(nil).AddBridge), in)
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// ListBridges mocks base method.
func (m *MockClient) ListBridges(in *messaging.ListCommand) (*messaging.ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBridges", in)
	ret0, _ := ret[0].(*messaging.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBridges indicates an expected call of ListBridges.
func (mr *MockClientMockRecorder) ListBridges(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBridges", reflect.TypeOf((*MockClient)(nil).ListBridges), in)
}

// RemoveBridge mocks base method.
func (m *MockClient) RemoveBridge(in *messaging.RemoveCommand) (*messaging.RemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBridge", in)
	ret0, _ := ret[0].(*messaging.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBridge indicates an expected call of RemoveBridge.
func (mr *MockClientMockRecorder) RemoveBridge(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBridge", reflect.TypeOf((*MockClient)(nil).RemoveBridge), in)
}
